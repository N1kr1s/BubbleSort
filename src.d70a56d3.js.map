{"version":3,"sources":["src/Sorter.ts","src/NumbersCollection.ts","src/CharactersCollection.ts","src/LinkedList.ts","src/index.ts"],"names":[],"mappings":";AAAA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EAAsB,IAAA,EAAA,WAAtB,SAAA,IAAA,EAAA,KAAA,GAAA,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAIE,MAAA,WACE,IAAK,IAAI,EAAI,KAAK,OAAQ,EAAI,EAAG,IAC/B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAI,EAAG,IACrB,KAAK,QAAQ,EAAG,EAAI,IACtB,KAAK,KAAK,EAAG,EAAI,OAR3B,EAAsB,GAAtB,QAAA,OAAA;;ACEA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,IAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,IAAA,WAAA,EAAA,IAAA,mBAAA,GAAA,OAAA,EAAA,QAAA,IAAA,EAAA,MAAA,IAAA,UAAA,4DAAA,OAAA,EAAA,GAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,QAAA,UAAA,QAAA,KAAA,QAAA,UAAA,QAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,uBAAA,EAFA,IAAA,EAAA,QAAA,YAEa,EAAA,SAAA,GAAb,EAAA,EAAuC,EAAA,QAAvC,IAAA,EAAA,EAAA,GACE,SAAmB,EAAA,GAAc,IAAA,EAAA,OAAA,EAAA,KAAA,IAC/B,EAAA,EAAA,KAAA,OADiB,KAAA,EAAc,EADnC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SAKE,IAAA,WACE,OAAO,KAAK,KAAK,SANrB,CAAA,IAAA,UASE,MAAA,SAAQ,EAAmB,GACzB,OAAO,KAAK,KAAK,GAAa,KAAK,KAAK,KAV5C,CAAA,IAAA,OAaE,MAAA,SAAK,EAAmB,GAAkB,IACQ,EAAA,CAC9C,KAAK,KAAK,GACV,KAAK,KAAK,IAFX,KAAK,KAAK,GAD6B,EAAA,GACjB,KAAK,KAAK,GADO,EAAA,OAb5C,EAAa,GAAb,QAAA,kBAAA;;ACAA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,IAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,IAAA,WAAA,EAAA,IAAA,mBAAA,GAAA,OAAA,EAAA,QAAA,IAAA,EAAA,MAAA,IAAA,UAAA,4DAAA,OAAA,EAAA,GAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,QAAA,UAAA,QAAA,KAAA,QAAA,UAAA,QAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,0BAAA,EAFA,IAAA,EAAA,QAAA,YAEa,EAAA,SAAA,GAAb,EAAA,EAA0C,EAAA,QAA1C,IAAA,EAAA,EAAA,GACE,SAAmB,EAAA,GAAY,IAAA,EAAA,OAAA,EAAA,KAAA,IAC7B,EAAA,EAAA,KAAA,OADiB,KAAA,EAAY,EADjC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SAKE,IAAA,WACE,OAAO,KAAK,KAAK,SANrB,CAAA,IAAA,UASE,MAAA,SAAQ,EAAmB,GACzB,OACE,KAAK,KAAK,GAAW,cAAgB,KAAK,KAAK,GAAY,gBAXjE,CAAA,IAAA,OAeE,MAAA,SAAK,EAAmB,GACtB,IAAM,EAAa,KAAK,KAAK,MAAM,IACe,EAAA,CAChD,EAAW,GACX,EAAW,IAFZ,EAAW,GAF4B,EAAA,GAEhB,EAAW,GAFK,EAAA,GAMxC,KAAK,KAAO,EAAW,KAAK,QArBhC,EAAa,GAAb,QAAA,qBAAA;;ACKA,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,IAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,IAAA,WAAA,EAAA,IAAA,mBAAA,GAAA,OAAA,EAAA,QAAA,IAAA,EAAA,MAAA,IAAA,UAAA,4DAAA,OAAA,EAAA,GAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,QAAA,UAAA,QAAA,KAAA,QAAA,UAAA,QAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA,EAPA,IAAA,EAAA,QAAA,YAEM,EAEJ,EAAA,SAAmB,EAAA,GAAY,EAAA,KAAA,GAAZ,KAAA,KAAA,EADnB,KAAA,KAAoB,OAIT,EAAA,SAAA,GAAb,EAAA,EAAgC,EAAA,QAAhC,IAAA,EAAA,EAAA,GAAA,SAAA,IAAA,IAAA,EAAA,OAAA,EAAA,KAAA,IAAA,EAAA,EAAA,MAAA,KAAA,YACE,KAAoB,KADtB,EAAA,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,MAGE,MAAA,SAAI,GACF,IAAM,EAAO,IAAI,EAAK,GACtB,GAAK,KAAK,KACL,CAEH,IADA,IAAI,EAAO,KAAK,KACT,EAAK,MACV,EAAO,EAAK,KAEd,EAAK,KAAO,OANE,KAAK,KAAO,IALhC,CAAA,IAAA,SAeE,IAAA,WACE,IAAK,KAAK,KAAM,OAAO,EAIvB,IAFA,IAAI,EAAS,EACT,EAAO,KAAK,KACT,EAAK,MACV,EAAO,EAAK,OACV,EAEJ,OAAO,IAxBX,CAAA,IAAA,KA2BE,MAAA,SAAG,GACD,IAAK,KAAK,KAAM,MAAM,IAAI,MAAM,iBAChC,GAAI,EAAQ,KAAK,OAAS,GAAK,EAAQ,EAAG,MAAM,IAAI,MAAM,iBAG1D,IAFA,IAAI,EAAU,EACV,EAAO,KAAK,KACT,EAAU,GACX,EAAK,OACP,EAAO,EAAK,KACZ,KAGJ,OAAO,IAtCX,CAAA,IAAA,UAyCE,MAAA,SAAQ,EAAmB,GACzB,IAAK,KAAK,KAAM,MAAM,IAAI,MAAM,iBAChC,OAAO,KAAK,GAAG,GAAW,KAAO,KAAK,GAAG,GAAY,OA3CzD,CAAA,IAAA,OA8CE,MAAA,SAAK,EAAmB,GACtB,IAAM,EAAW,KAAK,GAAG,GACnB,EAAY,KAAK,GAAG,GACtB,EAAO,EAAS,KACpB,EAAS,KAAO,EAAU,KAC1B,EAAU,KAAO,IAnDrB,CAAA,IAAA,QAsDE,MAAA,WACE,GAAK,KAAK,KAEV,IADA,IAAI,EAAoB,KAAK,KACtB,GACL,QAAQ,IAAI,EAAK,MACjB,EAAO,EAAK,SA3DlB,EAAa,GAAb,QAAA,WAAA;;ACcA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IApBA,IAAA,EAAA,QAAA,uBACA,EAAA,QAAA,0BACA,EAAA,QAAA,gBAGM,EAAsB,IAAI,EAAA,qBAAqB,SACrD,EAAoB,OACpB,QAAQ,IAAI,EAAoB,MAGhC,IAAM,EAAoB,IAAI,EAAA,kBAAkB,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,IACjE,EAAkB,OAClB,QAAQ,IAAI,EAAkB,MAG9B,IAAI,EAAO,IAAI,EAAA,WACf,EAAK,IAAI,KACT,EAAK,KAAK,GACV,EAAK,IAAI,IACT,EAAK,OACL,QAAQ,IAAI","file":"src.d70a56d3.js","sourceRoot":"..","sourcesContent":["export abstract class Sorter {\r\n  abstract length: number;\r\n  abstract compare(leftIndex: number, rightIndex: number): boolean;\r\n  abstract swap(leftIndex: number, rightIndex: number): void;\r\n  sort(): void {\r\n    for (let i = this.length; i > 0; i--) {\r\n      for (let j = 0; j < i - 1; j++) {\r\n        if (this.compare(j, j + 1)) {\r\n          this.swap(j, j + 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Sorter } from './Sorter';\r\n\r\nexport class NumbersCollection extends Sorter {\r\n  constructor(public data: number[]) {\r\n    super();\r\n  }\r\n\r\n  get length(): number {\r\n    return this.data.length;\r\n  }\r\n\r\n  compare(leftIndex: number, rightIndex: number): boolean {\r\n    return this.data[leftIndex] > this.data[rightIndex];\r\n  }\r\n\r\n  swap(leftIndex: number, rightIndex: number): void {\r\n    [this.data[leftIndex], this.data[rightIndex]] = [\r\n      this.data[rightIndex],\r\n      this.data[leftIndex],\r\n    ];\r\n  }\r\n}\r\n","import { Sorter } from './Sorter';\r\n\r\nexport class CharactersCollection extends Sorter {\r\n  constructor(public data: string) {\r\n    super();\r\n  }\r\n\r\n  get length(): number {\r\n    return this.data.length;\r\n  }\r\n\r\n  compare(leftIndex: number, rightIndex: number): boolean {\r\n    return (\r\n      this.data[leftIndex].toLowerCase() > this.data[rightIndex].toLowerCase()\r\n    );\r\n  }\r\n\r\n  swap(leftIndex: number, rightIndex: number): void {\r\n    const characters = this.data.split('');\r\n    [characters[leftIndex], characters[rightIndex]] = [\r\n      characters[rightIndex],\r\n      characters[leftIndex],\r\n    ];\r\n    this.data = characters.join('');\r\n  }\r\n}\r\n","import { Sorter } from './Sorter';\r\n\r\nclass Node {\r\n  next: Node | null = null;\r\n  constructor(public data: number) {}\r\n}\r\n\r\nexport class LinkedList extends Sorter {\r\n  head: Node | null = null;\r\n\r\n  add(data: number): void {\r\n    const node = new Node(data);\r\n    if (!this.head) this.head = node;\r\n    else {\r\n      let tail = this.head;\r\n      while (tail.next) {\r\n        tail = tail.next;\r\n      }\r\n      tail.next = node;\r\n    }\r\n  }\r\n\r\n  get length(): number {\r\n    if (!this.head) return 0;\r\n\r\n    let length = 1;\r\n    let node = this.head;\r\n    while (node.next) {\r\n      node = node.next;\r\n      ++length;\r\n    }\r\n    return length;\r\n  }\r\n\r\n  at(index: number): Node {\r\n    if (!this.head) throw new Error('No such index');\r\n    if (index > this.length - 1 || index < 0) throw new Error('No such index');\r\n    let counter = 0;\r\n    let node = this.head;\r\n    while (counter < index) {\r\n      if (node.next) {\r\n        node = node.next;\r\n        counter++;\r\n      }\r\n    }\r\n    return node;\r\n  }\r\n\r\n  compare(leftIndex: number, rightIndex: number): boolean {\r\n    if (!this.head) throw new Error('List is empty');\r\n    return this.at(leftIndex).data > this.at(rightIndex).data;\r\n  }\r\n\r\n  swap(leftIndex: number, rightIndex: number): void {\r\n    const leftNode = this.at(leftIndex);\r\n    const rightNode = this.at(rightIndex);\r\n    let temp = leftNode.data;\r\n    leftNode.data = rightNode.data;\r\n    rightNode.data = temp;\r\n  }\r\n\r\n  print(): void {\r\n    if (!this.head) return;\r\n    let node: Node | null = this.head;\r\n    while (node) {\r\n      console.log(node.data);\r\n      node = node.next;\r\n    }\r\n  }\r\n}\r\n","import { Sorter } from './Sorter';\r\nimport { NumbersCollection } from './NumbersCollection';\r\nimport { CharactersCollection } from './CharactersCollection';\r\nimport { LinkedList } from './LinkedList';\r\n\r\n//string sort\r\nconst characterCollection = new CharactersCollection('hello');\r\ncharacterCollection.sort();\r\nconsole.log(characterCollection.data);\r\n\r\n//number array sort\r\nconst numbersCollection = new NumbersCollection([8, 7, 9, 2, 5, -2]);\r\nnumbersCollection.sort();\r\nconsole.log(numbersCollection.data);\r\n\r\n//linked list sort\r\nlet link = new LinkedList();\r\nlink.add(200);\r\nlink.add(-5);\r\nlink.add(39);\r\nlink.sort();\r\nconsole.log(link);\r\n"]}